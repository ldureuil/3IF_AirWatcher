@startuml MCD

package "Données" {
  class Sensor {
    - id : string
    - lat : double
    - lng : double
    - measurements : vector<Measurement>
    - userId : string
    + distanceTo(lat, lng) : double
    + getSensorNeighbours() : vector<Sensor>
    + getMeasurements(period_start : DateTime, period_end : DateTime) : vector<vector<Measurement>>
    + getClosestMeasurements(instant : DateTime, before_after : int) : vector<Measurement>
  }

  class Measurement {
    - ts : DateTime
    - attr_unit : string
    - attr_desc : string
    - value : double
    + isWithin(period_start : DateTime, period_end : DateTime) : bool
  }

  class Cleaner {
    - id : string
    - lat : double
    - lng : double
    - start : DateTime
    - stop  : DateTime
    + getNeighbouringSensors(radius : int, sensors : vector<Sensor>*) : vector<Sensor>
  }

    class Credentials {
    - login : string
    - password : string
    - userType : UserType
  }

  class Particulierdata {
    - id : string
    - points : int
    - excluded : bool
  }
}


package "Services" {
  class Statistics {
    - vector<Sensor>* sensors
    - vector<Cleaner>* cleaners
    + analyzeSensor(sensorID: string) : int
    + analyzeCleaner(cleanerID: string, radius : int) : vector<long>
    + computeZone(lat : double, lng : double, period_start : DateTime, period_end : DateTime, radius : int) : vector<Measurement>
    + compareSensors(sensorID: string, period_start : DateTime, period_end : DateTime) : vector<Sensor>
    + extrapolateAQI(lat : double, lng : double, period_start : DateTime, period_end : DateTime) : vector<Measurement>
  }

  class PointsManager {
    - vector<Sensor>* sensors
    + award(sensorsUsed : vector<string>)
    + getPoints(userId : string) : int
  }

  class AdminServices {
    - vector<Sensor>* sensors
    + excludeSensor(sensorID: string)
  }

  package "Authentification" {
    enum UserType {
    - Admin
    - User
    - Particulier
    - Fournisseur
  }

  class Session {
    - userId : string
    - userType : UserType
    + getUserId() : string
    + getUserType() : UserType
  }

  class AuthService {
    - usersCredentials : vector<Credentials>
    + login(login : string, password : string) : Session
    + checkRequiredRole(session : Session, role : UserType) : bool
    + findCredentials(login : string) : Credentials
  }
  }
}


package "Accès aux données" {
  class DataLoader {
    + loadSensor(userType : UserType) : vector<Sensor>*
    + loadCleaner(userType : UserType) : vector<Cleaner>*
  }

  class UserDataAccess {
    + loadParticulierData() : vector<int>
    + updateParticulierData(userID : string)
  }

  class AuthDataAccess {
    + loadCredentials() : vector<Credentials>
  }
}


package "Interface utilisateur" {
  class CLI {
    + run()
  }
}



Sensor  o-- Measurement

CLI --> AuthService

Statistics     ..> AuthService : checkRequiredRole
PointsManager  ..> AuthService : checkRequiredRole
AdminServices  ..> AuthService : checkRequiredRole

Statistics     ..> Cleaner
Statistics     ..> Sensor
PointsManager  ..> Sensor
AdminServices  ..> Sensor

AuthService ..> Credentials
@enduml